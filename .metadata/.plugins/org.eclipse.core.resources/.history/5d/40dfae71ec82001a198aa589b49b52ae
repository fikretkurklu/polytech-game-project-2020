Donjon(Init){
  * (Init)
  | Cell(F,A) ? Power() : (Init)       
  | ! GotPower() ? Explode : ()     
  | Key(q) ? Move(W) : (Init)
  | Key(d) ? Move(E) : (Init)
  | Key(s) ? Wizz()  : (Init)          
  | Key(z) ? 50% Pop / 50% Jump: (Init)
  | Key(SPACE) ? Egg : (Init)        
}

Esprit(Init){
  *(Init)
  | Key(z) & Cell(N,V) ? Move(N) : (Diag_N)
  | Key(s) & Cell(S,V) ? Move(S) : (Diag_S)
  | Key(q) & Cell(W,V) ? Move(W) : (Diag_W)
  | Key(d) & Cell(E,V) ? Move(E) : (Diag_E)
  | Key(SPACE) ? Egg : (Init)
  | Key(a) ? Pop : (Init)               
  | Key(e) ? Wizz : (Init)              
  | Cell(H,A) ? Power : (Init)          
*(Diag_N)
  | Key(q) ? Move(W) : (Init)
  | Key(d) ? Move(E) : (Init)
  | True ? : (Init)    
*(Diag_S)
  | Key(q) ? Move(W) : (Init)
  | Key(d) ? Move(E) : (Init)
  | True ? : (Init)
*(Diag_W)
  | Key(z) ? Move (N) : (Init)
  | Key(s) ? Move(S) : (Init)
  | True ? : (Init)
*(Diag_E)
  | Key(z) ? Move(N) : (Init)
  | Key(s) ? Move(S) : (Init)
  | True ? : (Init)
}

Block(Inactif) {                
  *(Inactif) 
  | True ? : (Inactif)
}

Fleche(Init) {
  *(Init)
  | Cell(H,V) ? Move : (Init)
  | Cell(H,_) ? Explode : ( )
}

Monstre(Init) {
 * (Init)
  | Closest(L, A) ? Pop(L) : (Init)  
  | Closest(R, A) ? Pop(R) : (Init)    
  | Closest(L, O) ? Turn(R) : (Init)
  | Closest(R, O) ? Turn(L) : (Init)
  | Cell(H, M) ? Power : (Init)       
  | ! GotPower ? Explode : ()
  | True ? Move : (Init)
}



Fantome(State1) {
  *(State1)
  | Closest(N,A) ? Pop(N) : (secondMove)
  | Closest(W, A) ? Pop(W) : (secondMove)
  | Closest(S, A) ? Pop(S) : (secondMove)
  | Closest(E, A) ? Pop(E) : (secondMove)

  *(secondMove)
  | Closest(N, A)? Pop(N) : (State1)  
  | Closest(W, A) ? Pop(W) : (State1)
  | Closest(S, A)? Pop(S) : (State1)
  | Closest(E, A) ? Pop(E) : (State1)
}


Boss(Init) {
 * (Init): 
  | Closest(L, A) ? Turn(L) : (Action)
  | Closest(R, A) ? Turn(R) : (Action)

 *(Action):
  | True ? 3% Pop / 90% Move / 2% Egg  : (Init) 
  | Cell(H, M) ? Power : (Init)          
  | ! GotPower ? Explode : ()
 *():
}
